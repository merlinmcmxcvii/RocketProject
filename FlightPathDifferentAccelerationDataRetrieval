'''
This is the code of Louis Lallouette, Katherine Budeski, and Merlijn Kersten for the 
Introduction to Physics Rocket Lab Experiment, due on Wednesday November 18, 2015. 

In this programme, we calculate the flight path of a rocket. We divide our 
parameters into normal parameters and fitting parameters: parameters that
can be changed to make the model data fit the data of our experiment.

In our programme, we used the mass of the water inside of the rocket to calculate 
other properties, like the pressure, volume, and top-area, of the air and water
inside of the rocket.

We also wrote another programme that calculates the effect of taking a time step
twice as small as the chosen time step. Thus, we can calculate of this changes the
final outcome by more than 10%, e.g. if changing the timestep has a significant
effect on the final outcome. We send this programme to you via email. 

This code doesn't take the angle at which the rocket is fired into account:
currently it assumes it is fired straight up into the air (90 degree angle with 
the horizon) 
    It also doens't take the additional thrust force of  the escaping air out of 
rocket after the all the water is fired out into account. (This is because at that
moment, the air pressure inside the rocket is still higher than normal atmospheric
pressure). However, this influence is very small so this probably wouldn't have
a significant effect on the outcome of our model.

The template for this programme was provided by dr. Forrest Bradbury, some of his
code is still in this programme (mainly the ##MODULES ET CETERA and the ##PLOTS code). 
Much of the other code is based on the provided template code.

If you have any questions regarding this code, please feel free to contact us:
tibestinorilsk@gmail.com

Note: none of us had any experience with coding in Python when we started this 
project. This might mean that we made some style or other errors in our Python
language. If we did, we're very sorry. Please show us our mistakes and we'll try to 
not make them next time.
'''


#import matplotlib.patches as mpatches

## MODULES ET CETERA
print(__file__)
import numpy
import pylab
from datetime import datetime
import os
script_dir = os.path.dirname(os.path.abspath(__file__))
dest_dir = os.path.join(script_dir, 'data')
try:
    os.makedirs(dest_dir)
except OSError:
    pass 
pylab.clf() 
timestamp = datetime.now().strftime("%Y%m%d-%H%M%S") 
now = datetime.now()
print (" ")
print("Model started running at %s:%s:%s on %s/%s/%s" % (now.hour, now.minute, now.second, now.day, now.month, now.year))

## PARAMETERS
# First, all the normal parameters:
g = 9.81 # (m/s^2)          # roughly constant acceleration due to gravity on earth's surface
duration = 5 # (s)          # total time for simulation
z0 = 0 # (m)                # initial height
v0 = 0 # (m/s)              # initial velocity (vertical direction)
t0 = 0 # (s)                # starting time
massr = 0.289 # (kg)        # mass rocket
rhow = 1000 # (kg/m^3)      # density water
rhoa = 1.225 # (kg/m^3)     # density of air
vrel0 = 0 # (m/s)           # initial vrel
P0 =  101325 # (Pa)         # normal atmospheric pressure
dt = 0.00001 # (s)          # time step
massw0 = 0.541 # (kg)       # initial mass of water inside the bottle
Ab = 0.0014522 # (m^3)      # area of the bottlecap (r \approx 0.0125)
Area = 0.019113 # (m^3)     # (initial) area of the water level and the crossectional area of the rocket. r = 0.06
Vbottle = 0.001 #(m^3)      # total volume of the bottle

# Second, all the 'fitting' parameters, parameters that we could not measure during the
# experiment and thus try to choose in such a way that our model 'fits' the real data.
Cd = 0.9 # (dimensionless)  # drag coefficient
NkBT = 101.35 # (m^3*Pa)    # constant factor of the number of molecules of air inside the rocket, the Boltzman constant and the temperature of the air


## Text file with all the parameters
parameters = g, Cd, dt, duration, z0, v0, t0, massr, rhow, massw0, rhoa, Ab, Area,  vrel0, NkBT, P0, Vbottle
path_parameters = os.path.join(dest_dir + 'parameters_used.txt' + timestamp)  
numpy.savetxt(path_parameters, parameters, header='g, Cd, dt, duration, z0, v0, t0, massr, rhow, massw0, rhoa, Ab, Area, vrel0, NkBT, P0, Vbottle,  : All dimensions SI units !')


## FUNCTIONS
timesteps = numpy.int(duration/dt)              
time = numpy.arange(timesteps+1,dtype='d')*dt 
mass = numpy.zeros(timesteps+1,dtype='d')
a = numpy.zeros(timesteps+1,dtype='d')
F = numpy.zeros(timesteps+1,dtype='d')
v = numpy.zeros(timesteps+1,dtype='d')
z = numpy.zeros(timesteps+1,dtype='d')
t = numpy.zeros(timesteps+1,dtype='d')
beta = numpy.zeros(timesteps+1,dtype='d')   # beta is dm/dt
Vair = numpy.zeros(timesteps+1,dtype='d')
Pair = numpy.zeros(timesteps+1,dtype='d')
vrel = numpy.zeros(timesteps+1,dtype='d')
massw = numpy.zeros(timesteps+1,dtype='d')
Vw = numpy.zeros(timesteps+1,dtype='d')
h = numpy.zeros(timesteps+1,dtype='d')
Fthrust = numpy.zeros(timesteps+1,dtype='d')


## STARTING VALUES OF THE FUNCTIONS
#time[0] = 100
mass[0] = massr + massw0
F[0] = - mass[0]*g - 0.5*rhoa*Cd*Area*v[0]*abs(v[0]) + vrel[0]*beta[0] 
a[0] = F[0]/mass[0]
v[0] = v0
z[0] = z0
t[0] = t0
vrel[0] = vrel0 # 0
beta[0] = Ab*rhow*vrel[0] # 0
massw[0] = massw0 
Vw[0] = massw[0]/rhow 
Vair[0] = Vbottle - Vw[0]
Pair[0] = NkBT/Vair[0]
h[0] = Vw[0]/Area
Fthrust[0] = vrel[0]*beta[0]
maxz = 0
maxv = 0
maxa = 0


## ACTUAL FORMULAS
for j in numpy.arange(timesteps) :
    #if j<10:
    #    z[j] = 0
    #    a[j] = 0
    #    v[j] = 0
    if massw[j] > 0:                # This if-loop calculates the thrust force of the water on the rocket.    
        Vw[j] = massw[j]/rhow
        Vair[j] = Vbottle - Vw[j]
        Pair[j] = NkBT/Vair[j]
        h[j] = Vw[j]/Area   
        vrel[j] = (2* (Pair[j]-P0 + (g+a[j])*rhow*h[j]) / (rhow*(1-(Ab**2) / (Area**2) )))**0.5 # Derived using Bernoulli's equation and the equation of continuity.
        beta[j] = Ab*rhow*vrel[j]
        mass[j] = mass[j] - beta[j]*dt + massr
        Fthrust[j] = vrel[j]*beta[j]
    else:                           # If all the water is out of the rocket (massw == 0), this loop 
        mass[j] = massr
        Fthrust[j] = 0
    F[j] = - mass[j]*g - 0.5*rhoa*Cd*Area*v[j]*abs(v[j]) + Fthrust[j]  
    a[j] = F[j]/mass[j]
    v[j+1] = v[j] + dt*a[j]   
    z[j+1] = z[j] + dt*v[j+1] + dt*dt*a[j]/2
    t[j+1] = t[j] + dt
    massw[j+1] = massw[j] - beta[j]*dt
    if j==timesteps :               # This if-loop breaks the for-loop if the experiment time has ended.
        break
    elif z[j] < 0 and j > 0:        # This elif-loop lets a, v, and x go to 0 if the rocket hits the ground. (inelastic collision)
        break
    if z[j+1] > maxz:                # Saves the maximum value for z
        maxz = z[j+1]
    if v[j+1] > maxv:                # Saves the maximum value for v
        maxv = v[j+1]
    if a[j] > maxa:                  # Saves the maximum value for a
        maxa =  a[j]     




## DATA RETRIEVAL

#filename = raw_input('Please type in the name of the data file you wish to use:  ')
#if filename[-4:] != '.txt' :
#  print('\n You forgot to include the .txt file extension in your filename!  \n But, don\'t worry, the program was written to automatically add it ;) \n')
#  filename += '.txt'
#f = open(filename, 'r')
## UNCOMMENT THIS SECTION BEFORE HANDING IN THE CODE


# This line of code was used to open the data file on our computer.
f = open("/Users/merlijn/Google Drive/Rocket Lab/Data files/DataExperiment111115EDITED.txt", 'r')

header1 = f.readline()

xxx = []    #Empty array for the x-axis experiment data
yyy = []    #Empty array for the y-axis experiment data
zzz = []    #Empty array for the z-axis experiment data


for line in f:
    if line[0][0].isdigit():     
      columns = line.split()
      xxx.append(int(columns[2].strip(",")))  
      yyy.append(int(columns[3].strip(",")))
      zzz.append(int(columns[4]))
    else:
      print(' There is a blackout after the '+ str(len(xxx)) +'th data point')
#      break     

f.close()

datarate = 200

time3 = numpy.arange(int(len(xxx)), dtype='d') / datarate    # We used a 200 Hz sensor

# Make numpy arrays of the x, y, and z data lists. 
acc_vectors = [numpy.array(xxx,dtype='i'), numpy.array(yyy,dtype='i'), numpy.array(zzz,dtype='i')]  
xx = numpy.array(xxx,dtype='i')
yy = numpy.array(yyy,dtype='i')
zz = numpy.array(zzz,dtype='i')





## EXPERIMENT DATA MODIFIYNG
dt2 = 0.005     # Timestep of a 200 Hz sensor
arealmax = 0    
vrealmax = 0
zrealmax = 0

timesteps2 = numpy.int(778)              
time2 = numpy.arange(timesteps+1,dtype='d')*dt2           
areal = numpy.arange(timesteps2+1,dtype='d') 
vreal = numpy.arange(timesteps2+1,dtype='d') 
zreal = numpy.arange(timesteps2+1,dtype='d')             
           
areal[0] = 0
vreal[0] = 0
zreal[0] = 0

for i in range(len(zzz)):
    areal[i] = zz[i]*0.3033 -8.8655    # Calculates the real acceleration value with calibration data
    vreal[i+1] = areal[i]*dt2 + vreal[i]
    zreal[i+1] = vreal[i+1]*dt2 + 0.5*areal[i]*dt2*dt2 + zreal[i]
    if areal[i] > arealmax:                 # Saves the maximum value of areal
        arealmax = areal[i]
    if vreal[i+1] > vrealmax:               # Saves the maximum value of vreal
        vrealmax = vreal[i+1]
    if zreal[i+1] > zrealmax:
        zrealmax = zreal[i+1]               # Saves the maximum value of zreal
    if i == 770:
        break
    elif zreal[i+1] < 0:
        break
    


## Print the maximum values for the height, velocity and acceleration:
print (" ")
print ("MODEL DATA")
print (" Maximum height: " + str(round(maxz, 2)) + " (m)")
print (" Maximum velocity: " + str(round(maxv, 2)) + " (m/s)")
print (" Maximum acceleration: " + str(round(maxa, 2)) + " (m/s^2)")
print (" Last array position calculated = " + str(j))
print (" ")
print ("REAL DATA")
print (" Maximum height: " + str(round(zrealmax, 2)) + " (m)")
print (" Maximum velocity: " + str(round(vrealmax, 2)) + " (m/s)")
print (" Maximum acceleration: " + str(round(arealmax, 2)) + " (m/s^2)")
print (" ")  
print('\n Your data file included '+ str(len(xxx)) +' timestamps,') 
print(' which at 200Hz data rate is about '+ str((len(xxx))/200) +' seconds of measuring time.') 
print (" ")  
    



    

##PLOTS
z.resize(j+1)
v.resize(j+1)
a.resize(j+1)
zreal.resize(i+1)
vreal.resize(i+1)
areal.resize(i+1)
time.resize(j+1)
time2.resize(i+1)

# Height subplot
ax1=pylab.subplot(3,1,1)
pylab.plot(time,z,'g-', label='model')
pylab.plot(time2, zreal, 'b-', label='experiment')
pylab.xlabel('time (s)')
pylab.ylabel('height (m)')
pylab.title('Height versus time')
pylab.xlim(0, 3)
pylab.ylim(0, 10)
pylab.legend(loc = 'best')

# Velocity subplot
ax2=pylab.subplot(3,1,2)
pylab.plot(time,v,'g-', label='model')
pylab.plot(time2, vreal, 'b-', label='experiment')
pylab.xlabel('time (s)')
pylab.ylabel('velocity (m/s)')
pylab.title('Velocity versus time')
pylab.xlim(0, 3)
pylab.ylim(-15, 20)
pylab.legend(loc = 'best')

# Acceleration subplot
ax3=pylab.subplot(3,1,3)
pylab.plot(time,a,'g-', label='model')
pylab.plot(time2, areal, 'b-', label='experiment')
pylab.xlabel('time (s)')
pylab.ylabel('acceleration (m/s$^2$)')
pylab.title('Acceleration versus time')
pylab.xlim(0, 3)
pylab.ylim(-10, 1200)
pylab.legend(loc = 'best')

# Saves plots
path_figures = os.path.join(dest_dir, timestamp + 'FlightPath.png')
pylab.savefig(path_figures)
pylab.subplots_adjust(left=0.08, right=0.95, wspace=3, hspace=0.5)
pylab.show()

dataarray = numpy.array([time, z, v, a]).T            
path_dataarray = os.path.join(dest_dir, timestamp + 'data_array.txt')
numpy.savetxt(path_dataarray, dataarray, header='time, z, v, a')
